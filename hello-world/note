state
1. 处于性能考虑，多个state同时更新，且state和props可能异步更新，所以当同时使用props和state更新时，可以在setState中使用函数而不是对象。

列表和key
2. 元素的 key 只有放在就近的数组上下文中才有意义。且key 只是在兄弟节点之间必须唯一。
   解释：意思就是如果是li，放在最靠近ul的元素里，比如一个组件包含li，这个组件放入ul，给这个组件配上key而不是li。

props
3. 在受控组件上指定 value 的 prop 会阻止用户更改输入。如果你指定了 value，但输入仍可编辑，则可能是你意外地将value 设置为 undefined 或 null。

受控组件和非受控组件以及状态提升
4. 注意区分受控组件和非受控组件，还有状态提升的方式，即没必要用之前钻进的死胡同，用子组件的state承担props，然后再修改父组件的state触发子组件重新渲染，这种方式是条死路。。。
   正确做法就是子组件直接使用props作为value，然后使用父组件的方法修改父组件的state，进而修改子组件的props，同步修改！

React设计哲学
5. 设计组件，遵循这几步：
              - 将设计好的 UI 划分为组件层级
              - 用 React 创建一个静态版本
              - 确定 UI state 的最小（且完整）表示
              - 确定 state 放置的位置
              - 添加反向数据流